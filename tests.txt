nt = ["Q", "S", "T", "V", "X"] ; t = ["a","b","c","d","e"] ; is = "S" ; p = HM.fromList [("Q",["c"]),("S",["b","T a", "e", "V b", "X c"]),("T",["b","T a","V b"]),("V",["b","V b"]),("X",["Q d","X c"])] ; ginit = GR nt t p is ; gvalid = createGR nt t p is

nt = ["S", "A", "B"] ; t = ["a","b"] ; is = "S" ; p = HM.fromList [("S",["A a","B b"]),("A",["\\","b"]),("B",["\\","a"])] ; ginit = GR nt t p is ; gvalid = createGR nt t p is

-------------------------------------------------------------------------------
TEST 1 (AFD -> GR) Creo afd1 y lo paso a gr1
-------------------------------------------------------------------------------
sts1 = ["A","B","C","D"] ;
alp1 = ["0","1","2"] ;
fsts1 = sts1 ;
init1 = "A" ;
d1 = [[Just "B",Just "C",Just "D"],[Just "B",Just "C",Just "D"],[Nothing,Just "C",Just "D"],[Nothing,Nothing,Just "D"]] ;
unmaybe = (\(Just c) -> c) ;
setDeltas d = (\(Just (AFD a s f i d')) -> (AFD a s f i d)) ;
afd1 = setDeltas d1 (createAFD alp1 sts1 fsts1 init1);
gr1 = unmaybe (toGR afd1);
-------------------------------------------------------------------------------
TEST 2 (AFNDL -> AFND -> AFD) Creo afndl2-> afnd2 -> afd2
-------------------------------------------------------------------------------
sts2 = ["A","B","C"] ;
alp2 = ["0","1","2"] ;
fsts2 = ["C"] ;
init2 = "A" ;
d2 = [[["A"],[],[],["B"]],[[],["B"],[],["C"]],[[],[],["C"],[]]] ;
unmaybe = (\(Just c) -> c) ;
setDeltas2 d = (\(Just (AFNDL a s f i d')) -> (AFNDL a s f i d)) ;
afndl2 = setDeltas2 d2 (createAFNDL alp2 sts2 fsts2 init2);
afnd2 = toAFND afndl2;
afd2 = toAFD afnd2;

-------------------------------------------------------------------------------
TEST 3 (toGR para todo AF) Paso afndl2, afnd2 y afd2 a GR
-------------------------------------------------------------------------------
sts3 = ["A","B","C"] ;
alp3 = ["0","1","2"] ;
fsts3 = ["C"] ;
init3 = "A" ;
d3 = [[["A"],[],[],["B"]],[[],["B"],[],["C"]],[[],[],["C"],[]]] ;
unmaybe = (\(Just c) -> c) ;
setDeltas3 d = (\(Just (AFNDL a s f i d')) -> (AFNDL a s f i d)) ;
afndl3 = setDeltas3 d3 (createAFNDL alp3 sts3 fsts3 init3);
afnd3 = toAFND afndl3;
afd3 = toAFD afnd3;

gr3 = unmaybe (dlToGR afndl3);
gr3' = unmaybe (dToGR afnd3);
gr3'' = unmaybe (toGR afd3);
-------------------------------------------------------------------------------
TEST 4 (AFD -> AFND -> AFNDL) Verificamos las vuelta
-------------------------------------------------------------------------------
sts4 = ["A","B","C"] ;
alp4 = ["0","1","2"] ;
fsts4 = ["C"] ;
init4 = "A" ;
d4 = [[["A"],[],[],["B"]],[[],["B"],[],["C"]],[[],[],["C"],[]]] ;
unmaybe = (\(Just c) -> c) ;
setDeltas4 d = (\(Just (AFNDL a s f i d')) -> (AFNDL a s f i d)) ;
afndl4 = setDeltas4 d4 (createAFNDL alp4 sts4 fsts4 init4);
afnd4 = toAFND afndl4;
afd4 = toAFD afnd4;
afnd4' = afdToAFND afd4;
afndl4' = afdToAFNDL afd4;
afndl4'' = afndToAFNDL afnd4;
-------------------------------------------------------------------------------
TEST 5 ()
-------------------------------------------------------------------------------
nt = ["Q", "S", "T", "V", "X"] ;
t = ["a","b","c","d","e"] ; 
is = "S" ; 
p = HM.fromList [("Q",["c"]),("S",["b","T a", "e", "V b", "X c"]),("T",["b","T a","V b"]),("V",["b","V b"]),("X",["Q d","X c"])] ; ginit = GR nt t p is ; 
gvalid = createGR nt t p is ;
unmaybe = (\(Just c) -> c) ;
g = toRight (unmaybe gvalid) ;
-------------------------------------------------------------------------------
TEST 6 ()
-------------------------------------------------------------------------------
nt = ["S", "A", "B"] ;
t = ["a","b"] ; 
is = "S" ; 
p = HM.fromList [("S",["A a","B b"]),("A",["\\","b"]),("B",["\\","a"])] ; 
ginit = GR nt t p is ; 
gvalid = createGR nt t p is ;
unmaybe = (\(Just c) -> c) ;
g = toRight (unmaybe gvalid) ;
-------------------------------------------------------------------------------
TEST 7 ()
-------------------------------------------------------------------------------
